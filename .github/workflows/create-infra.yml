name: create-infra
on: 
    push:
        branches:
            - main
            - dev
    workflow_dispatch:
env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    AWS_DEFAULT_REGION: "us-east-1"
    CACHE_FOLDER: cache_data
run-name: creating aws infra
jobs:
    create-key-pair:
        env:
            JOB_FOLDER: create-keys/  
        outputs:
            key_pair_name: ${{ steps.publish-key-pair-name.outputs.key_pair_name }}
        runs-on: ubuntu-latest
        steps:
            - name: checkout code
              uses: actions/checkout@v4
            - name: Install terraform
              uses: hashicorp/setup-terraform@v3
            - name: initialize terraform
              run: terraform -chdir=${{ env.JOB_FOLDER }} init
            - name: create infra
              run: terraform -chdir=${{ env.JOB_FOLDER }} apply -auto-approve
            - name: Prepare cache folder
              run: |
                mkdir -p ${{ env.CACHE_FOLDER }}/create_keys_cache
                cp -r "${{ env.JOB_FOLDER }}terraform.tfstate" \
                "${{ env.JOB_FOLDER }}$(terraform -chdir=${{ env.JOB_FOLDER }} output -raw key_pair_output)" \
                "${{ env.JOB_FOLDER }}.terraform" \
                "${{ env.JOB_FOLDER }}.terraform.lock.hcl" \
                ${{ env.CACHE_FOLDER }}/create_keys_cache/
            - name: cache data
              uses: actions/cache@v4
              with:
                path: "${{ env.CACHE_FOLDER }}/create_keys_cache"
                key: "ec2-key-setup-test-job1-${{ github.run_number }}"
            - name: output key_pair_name
              id: publish-key-pair-name
              run: echo "key_pair_name=$(terraform -chdir=${{ env.JOB_FOLDER }} output -raw key_pair_name)" >> $GITHUB_OUTPUT
    create-security-group:
        runs-on: ubuntu-latest
        env:
            JOB_FOLDER: create-sg
        outputs:
            sg_ids: ${{ steps.publish-sg-id.outputs.sg_grp_ids }}
        steps:
          - name: Get code
            uses: actions/checkout@v4
          - name: Install terraform
            uses: hashicorp/setup-terraform@v3
          - name: Initialize terraform
            run: terraform -chdir=${{ env.JOB_FOLDER }} init
          - name: create infra
            run: terraform -chdir=${{ env.JOB_FOLDER }} apply -auto-approve
          - name: Prepare cache folder
            run: |
              mkdir -p ${{ env.CACHE_FOLDER }}/create_sg
              cp -r "${{ env.JOB_FOLDER }}/terraform.tfstate" \
              "${{ env.JOB_FOLDER }}/.terraform" \
              "${{ env.JOB_FOLDER }}/.terraform.lock.hcl" \
              ${{ env.CACHE_FOLDER }}/create_sg/
          - name: cache data
            uses: actions/cache@v4
            with:
              path: "${{ env.CACHE_FOLDER }}/create_sg"
              key: "ec2-key-setup-test-job2-${{ github.run_number }}"
          - name: output sg ids
            id: publish-sg-id
            run: |
             echo "sg_grp_ids=$(terraform -chdir=${{env.JOB_FOLDER}} output -json aws_security_group_ids | jq -c '.')"
             echo "sg_grp_ids=$(terraform -chdir=${{env.JOB_FOLDER}} output -json aws_security_group_ids)" >> $GITHUB_OUTPUT
    create-vm:
        runs-on: ubuntu-latest
        env:
            JOB_FOLDER: create-vm/  
        needs:
          - create-key-pair
          - create-security-group
        outputs:
          ec2-public-ip1: ${{ steps.publish-ip-address.outputs.ec2_public_ip1 }}
          ec2-public-ip2: ${{ steps.publish-ip-address.outputs.ec2_public_ip2 }}
        steps:
            - name: Get code
              uses: actions/checkout@v4
            - name: Install terraform
              uses: hashicorp/setup-terraform@v3
            - name: Initialize terraform
              run: terraform -chdir=${{ env.JOB_FOLDER }} init
            - name: create infra
              run: | 
                terraform -chdir=${{ env.JOB_FOLDER }} apply \
                -var="key_pair_name=${{ needs.create-key-pair.outputs.key_pair_name }}" \
                -var='security_group_id_list=${{ needs.create-security-group.outputs.sg_ids }}' \
                -auto-approve
            - name: Prepare cache folder
              run: |
                mkdir -p ${{ env.CACHE_FOLDER }}/create_vm
                cp -r "${{ env.JOB_FOLDER }}/terraform.tfstate" \
                "${{ env.JOB_FOLDER }}/.terraform" \
                "${{ env.JOB_FOLDER }}/.terraform.lock.hcl" \
                ${{ env.CACHE_FOLDER }}/create_vm/
            - name: cache data
              uses: actions/cache@v4
              with:
                path: "${{ env.CACHE_FOLDER }}/create_vm"
                key: "ec2-key-setup-test-job3-${{ github.run_number }}"
            - name: output ec2 ip address
              id: publish-ip-address
              run: | 
                echo "ec2_public_ip1=$( terraform -chdir=${{ env.JOB_FOLDER }} output -raw myEc2Ip1 )" >> $GITHUB_OUTPUT
                echo "ec2_public_ip2=$( terraform -chdir=${{ env.JOB_FOLDER }} output -raw myEc2Ip2 )" >> $GITHUB_OUTPUT
    display-data:
        runs-on: ubuntu-latest
        needs:
          - create-vm
        steps:
          - name: Show ips
            run: |
              echo "ip1=${{ needs.create-vm.outputs.ec2-public-ip1 }}"
              echo "ip2=${{ needs.create-vm.outputs.ec2-public-ip2 }}"
    destroy-infra:
        runs-on: ubuntu-latest
        needs: 
          - create-key-pair
          - create-security-group
          - create-vm
        env:
            JOB_FOLDER: create-infra/
        steps:
            - name: Install terraform
              uses: hashicorp/setup-terraform@v3
            - name: load cache job1
              uses: actions/cache@v4
              with:
                path: "${{ env.CACHE_FOLDER }}/create_keys_cache"
                key: "ec2-key-setup-test-job1-${{ github.run_number }}"
            - name: check
              run: ls -lart ${{ env.CACHE_FOLDER }}/create_keys_cache
            - name: load cache job2
              uses: actions/cache@v4
              with:
                path: "${{ env.CACHE_FOLDER }}/create_sg"
                key: "ec2-key-setup-test-job2-${{ github.run_number }}"
            - name: check
              run: ls -lart ${{ env.CACHE_FOLDER }}/create_sg
            - name: load cache job3
              uses: actions/cache@v4
              with:
                path: "${{ env.CACHE_FOLDER }}/create_vm"
                key: "ec2-key-setup-test-job3-${{ github.run_number }}"
            - name: check
              run: ls -lart ${{ env.CACHE_FOLDER }}/create_vm
            - name: Initialize terraform
              run: |
                terraform -chdir=${{ env.CACHE_FOLDER }}/create_keys_cache init
                terraform -chdir=${{ env.CACHE_FOLDER }}/create_sg init
                terraform -chdir=${{ env.CACHE_FOLDER }}/create_vm init
            - name: Destroy infra
              run: |
                terraform -chdir=${{ env.CACHE_FOLDER }}/create_vm destroy -auto-approve
                terraform -chdir=${{ env.CACHE_FOLDER }}/create_keys_cache destroy -auto-approve
                terraform -chdir=${{ env.CACHE_FOLDER }}/create_sg destroy -auto-approve

